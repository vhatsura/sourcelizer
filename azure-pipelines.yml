trigger:
- master

variables:
  buildConfiguration: 'Release'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

jobs:

- job: Build
  displayName: Build, analyze and run unit tests
  pool:
    vmImage: 'ubuntu-latest'
  steps:   
  - task: UseDotNet@2
    inputs:
      packageType: sdk
      includePreviewVersions: true
      version: '3.0.x'
    displayName: Install .Net Core 3.0.x-preview SDK

  - task: CacheBeta@0
    inputs:
      key: nuget
      path: $(NUGET_PACKAGES)
    displayName: Cache NuGet packages

  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud vhatsura'
      organization: 'vhatsura'
      scannerMode: 'MSBuild'
      projectKey: 'sourcelyzer'
      projectName: 'sourcelyzer'
      extraProperties: |
        # Additional properties that will be passed to the scanner, 
        # Put one key=value per line, example:
        # sonar.exclusions=**/*.bin
        # sonar.exclusion need to be configured in SonarCloud UI
        # https://docs.sonarqube.org/latest/analysis/analysis-parameters/
        sonar.cs.opencover.reportsPaths="**\coverage.opencover.xml"
        sonar.exlusions="benchmarks/**"
        sonar.coverage.exclusions="benchmarks/**;examples/**"
    displayName: Prepare SonarCloud

  - task: DotNetCoreCLI@2
    inputs:
      command: build
      arguments: '--configuration $(buildConfiguration)'
    displayName: Build

  - task: DotNetCoreCLI@2
    inputs:
      command: test
      arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      nobuild: true
    displayName: Run unit tests

  - task: SonarCloudAnalyze@1
    displayName: Run Sonar Scanner

  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: '300'
    displayName: Publish analyze artifacts to Sonar Cloud
    

  - task: DotNetCoreCLI@2
    inputs:
      command: pack
      arguments: '--configuration $(buildConfiguration) --include-symbols'
      nobuild: true
    displayName: Pack

  - task: PublishBuildArtifacts@1
    inputs:
      artifactName: 'packages'
    displayName: Publish build artifacts to Azure Pipelines

- job: Integration
  displayName: Run integration tests
  pool:
    vmImage: 'ubuntu-latest'

- job: Publish
  displayName: Publish nuget packages
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: sdk
      version: '2.2.x'
    displayName: Install .Net Core 2.2.x SDK

  - task: NuGetToolInstaller@0
    inputs:
      versionSpec: '>=4.9.0'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: packages
    displayName: Download build artifacts from Azure Pipelines